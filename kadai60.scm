(define (stack-push st val)
  (cons val st))
(define (stack-read st)
  (car st))
(define (stack-pop st)
  (cdr st))
(define (calc-add st)
  (let ((x (stack-read st)) (y (stack-read (stack-pop st))))
    (stack-push (stack-pop (stack-pop st)) (+ x y))))
(define (calc-sub st)
  (let ((x (stack-read st)) (y (stack-read (stack-pop st))))
    (stack-push (stack-pop (stack-pop st)) (- y x))))
(define (calc-mul st)
  (let ((x (stack-read st)) (y (stack-read (stack-pop st))))
    (stack-push (stack-pop (stack-pop st)) (* x y))))

(let ((st (list)))
  (define (main-loop st)
    (let ((cmd (read)))
      (cond
       ((or (equal? cmd '=) (eof-object? cmd))
        (write (stack-read st)) (newline))
       ((equal? cmd '+)
        (main-loop (calc-add st)))
       ((equal? cmd '-)
        (main-loop (calc-sub st)))
       ((equal? cmd '*)
        (main-loop (calc-mul st)))
       ((number? cmd)
        (main-loop (stack-push st cmd)))
       (else
        (display "(unknown command)\n")
        (main-loop st)))))
  (main-loop st))
